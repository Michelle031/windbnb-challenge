import { createSlice } from '@reduxjs/toolkit';

export const initialState = {
  loading: false,
  hasErrors: false,
  stays: [],
  filteredStays: [],
  filter: "Helsinki",
  guests: 0,
};

const staysSlice = createSlice({
  name: 'stays',
  initialState,
  reducers: {
    getStays: state => {
      state.loading = true
    },
    getStaysSuccess: (state, { payload }) => {
      state.stays = payload
      state.loading = false
      state.hasErrors = false
    },
    getStaysFailure: state => {
      state.loading = false
      state.hasErrors = true
    },
    setFilter: (state, { payload}) => {
      state.filter = payload
    },
    setFilteredStays: (state, { payload}) => {
      state.filteredStays = payload;
    },
    setGuests: (state, { payload}) => {
      state.guests = payload;
    }
  },
});
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices

export const { getStays, getStaysSuccess, getStaysFailure, setFilter, setFilteredStays, setGuests } = staysSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const staysSelector = (state) => state.stays;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export function fetchStays() {
  return async dispatch => {
    dispatch(getStays())

    try {
      const response = await fetch('/stays.json');
      const data = await response.json()

      dispatch(getStaysSuccess(data))
      dispatch(setFilteredStays(data))
    } catch (error) {
      dispatch(getStaysFailure())
    }
  }
}

export default staysSlice.reducer;
